{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Bem vindo a p\u00e1gina do Projeto de ETL, o projeto tem como objetivo juntar varios arquivos em um \u00fancio arquivo e realziar transforma\u00e7\u00f5es no meio do caminho.</p>"},{"location":"#fluxo-do-projeto","title":"Fluxo do Projeto","text":"flowchart LR     subgraph ETL [Pipeline]         A(M\u00faltiplos Arquivos Excel) --&gt; B[Extract: extraindo_dados_excel]         B(Extract: extraindo_dados_excel) --&gt; |Gera uma Lista de DataFrames| C[Transformation: concatenar_df]         C --&gt; |Gera um DataFrame Consolidado| D[Load: Converte para Excel]         D --&gt; |Salva o consolidade em Excel| E(Pasta Output: \u00danico Arquivo Excel)     end"},{"location":"pipeline/","title":"Pipeline","text":""},{"location":"pipeline/#funcao-de-extracao","title":"Fun\u00e7\u00e3o de Extra\u00e7\u00e3o","text":"<p>Fun\u00e7\u00e3o para ler arquivos de uma pasta data/input e retornar uma lista de dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>Input_path</code> <code>str</code> <p>caminho da pasta com os arquivos</p> required Return <p>lista de dataframes</p> Source code in <code>app\\pipeline\\extract.py</code> <pre><code>def extranindo_dados_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Fun\u00e7\u00e3o para ler arquivos de uma pasta data/input e retornar uma lista de dataframes.\n\n    Args:\n        Input_path (str): caminho da pasta com os arquivos\n\n    Return:\n        lista de dataframes\n    \"\"\"\n    arquivos = glob.glob(os.path.join(path, \"*.xlsx\"))\n\n    lista_df = []\n\n    for arquivo in arquivos:\n        lista_df.append(pd.read_excel(arquivo))\n\n    return lista_df\n</code></pre>"},{"location":"pipeline/#funcao-de-transformacao","title":"Fun\u00e7\u00e3o de Transforma\u00e7\u00e3o","text":"<p>Concatenates a list of pandas DataFrames into a single DataFrame with the option to ignore the original index and create a new one.</p> <p>Parameters:</p> Name Type Description Default <code>dataframes</code> <code>List[DataFrame]</code> <p>The list of DataFrames to be concatenated.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The concatenated DataFrame.</p> Source code in <code>app\\pipeline\\trasform.py</code> <pre><code>def concatenar_df(dataframes: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Concatenates a list of pandas DataFrames into a single DataFrame with the option to ignore the original index and create a new one.\n\n    Args:\n        dataframes (List[pd.DataFrame]): The list of DataFrames to be concatenated.\n\n    Returns:\n        pd.DataFrame: The concatenated DataFrame.\n    \"\"\"\n    return pd.concat(dataframes, ignore_index=True)\n</code></pre>"},{"location":"pipeline/#funcao-de-load","title":"Fun\u00e7\u00e3o de Load","text":"<p>Receber um data frame e salvar como um excel.</p> <p>Parameters:</p> Name Type Description Default <code>data_fame</code> <code>dataframe</code> <p>dataframe a ser salvo</p> required <code>output_path</code> <code>str</code> <p>caminho do arquivo a ser salvo</p> required <code>file_name</code> <code>str</code> <p>nome do arquivo</p> required Source code in <code>app\\pipeline\\load.py</code> <pre><code>def load_excel(data_frame: pd.DataFrame, output_path: str, file_name: str) -&gt; str:\n    \"\"\"\n    Receber um data frame e salvar como um excel.\n\n    Args:\n        data_fame (dataframe): dataframe a ser salvo\n        output_path (str): caminho do arquivo a ser salvo\n        file_name (str): nome do arquivo\n    \"\"\"\n    os.makedirs(output_path, exist_ok=True)\n    data_frame.to_excel(f\"{output_path}/{file_name}.xlsx\", index=False)\n    return \"Arquivo Salvo com Sucesso\"\n</code></pre>"}]}